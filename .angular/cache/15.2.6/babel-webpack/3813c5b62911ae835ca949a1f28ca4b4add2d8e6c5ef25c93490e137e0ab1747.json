{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PaisesService {\n  constructor(service) {\n    this.service = service;\n  }\n  dameDatos(url) {\n    //return this.service.get(url);\n    return new Promise((resolve, reject) => {\n      fetch(url).then(response => {\n        console.log(response);\n        return response.json();\n      }).then(datos => resolve(datos)).catch(error => reject(error));\n    });\n  }\n}\nPaisesService.ɵfac = function PaisesService_Factory(t) {\n  return new (t || PaisesService)(i0.ɵɵinject(i1.HttpClient));\n};\nPaisesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PaisesService,\n  factory: PaisesService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAMA,OAAM,MAAOA,aAAa;EAExBC,YAAoBC,OAAkB;IAAlB,YAAO,GAAPA,OAAO;EAAe;EAE1CC,SAAS,CAACC,GAAU;IAClB;IACA,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAACC,MAAM,KAAG;MACnCC,KAAK,CAACJ,GAAG,CAAC,CAACK,IAAI,CAACC,QAAQ,IAAE;QACxBC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;QACrB,OAAOA,QAAQ,CAACG,IAAI,EAAE;MAExB,CAAC,CAAC,CACDJ,IAAI,CAACK,KAAK,IAAER,OAAO,CAACQ,KAAK,CAAC,CAAC,CAACC,KAAK,CAACC,KAAK,IAAET,MAAM,CAACS,KAAK,CAAC,CAAC;IAC1D,CAAC,CAAC;EACJ;;AAdWhB,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;SAAbA,aAAa;EAAAiB,SAAbjB,aAAa;EAAAkB,YAFZ;AAAM","names":["PaisesService","constructor","service","dameDatos","url","Promise","resolve","reject","fetch","then","response","console","log","json","datos","catch","error","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\UsuarioM\\git\\becaonce2ed\\src\\app\\paises.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PaisesService {\r\n\r\n  constructor(private service:HttpClient) { }\r\n\r\n  dameDatos(url:string):any{\r\n    //return this.service.get(url);\r\n    return new Promise((resolve,reject)=>{\r\n      fetch(url).then(response=>{\r\n        console.log(response)\r\n        return response.json()\r\n        \r\n      })\r\n      .then(datos=>resolve(datos)).catch(error=>reject(error));\r\n    })\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}